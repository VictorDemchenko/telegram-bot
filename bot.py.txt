from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "7800081122:AAFIBS7T4KMeR_9ab4Rf4nYj77Ujjk-RaxM"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ü–∏—Ñ—Ä
def format_block(numbers, digit):
    count = str(numbers).count(str(digit))
    return str(digit) * count if count > 0 else "-"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∞
def count_total(blocks, keys):
    return sum(len(blocks[key].replace("-", "")) for key in keys)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã
async def calculate_matrix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è
        date_of_birth = update.message.text.strip()
        day, month, year = map(int, date_of_birth.split("."))

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ —Ü–∏—Ñ—Ä—ã
        digits = list(map(int, date_of_birth.replace(".", "")))

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞
        first_sum = sum(digits)  # –ü–µ—Ä–≤–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
        second_sum = sum(map(int, str(first_sum)))  # –í—Ç–æ—Ä–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–ß–∏—Å–ª–æ —Å—É–¥—å–±—ã)
        first_digit_day = int(str(day)[0]) if str(day)[0] != "0" else int(str(day)[1])
        third_sum = first_sum - 2 * first_digit_day  # –¢—Ä–µ—Ç—å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
        fourth_sum = sum(map(int, str(abs(third_sum))))  # –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∏—Å–ª–∞ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
        all_numbers = digits + [first_sum, second_sum, third_sum, fourth_sum]

        # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–∏—Ñ—Ä –æ—Ç 1 –¥–æ 9
        blocks = {
            "–•–∞—Ä–∞–∫—Ç–µ—Ä (1)": format_block(all_numbers, 1),
            "–≠–Ω–µ—Ä–≥–∏—è (2)": format_block(all_numbers, 2),
            "–ò–Ω—Ç–µ—Ä–µ—Å (3)": format_block(all_numbers, 3),
            "–ó–¥–æ—Ä–æ–≤—å–µ (4)": format_block(all_numbers, 4),
            "–õ–æ–≥–∏–∫–∞ (5)": format_block(all_numbers, 5),
            "–¢—Ä—É–¥ (6)": format_block(all_numbers, 6),
            "–£–¥–∞—á–∞ (7)": format_block(all_numbers, 7),
            "–î–æ–ª–≥ (8)": format_block(all_numbers, 8),
            "–ü–∞–º—è—Ç—å (9)": format_block(all_numbers, 9),
        }

        # –í–Ω–µ—à–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç
        temperament = count_total(blocks, ["–ò–Ω—Ç–µ—Ä–µ—Å (3)", "–õ–æ–≥–∏–∫–∞ (5)", "–£–¥–∞—á–∞ (7)"])
        goal = count_total(blocks, ["–•–∞—Ä–∞–∫—Ç–µ—Ä (1)", "–ó–¥–æ—Ä–æ–≤—å–µ (4)", "–£–¥–∞—á–∞ (7)"])
        family = count_total(blocks, ["–≠–Ω–µ—Ä–≥–∏—è (2)", "–õ–æ–≥–∏–∫–∞ (5)", "–î–æ–ª–≥ (8)"])
        habits = count_total(blocks, ["–ò–Ω—Ç–µ—Ä–µ—Å (3)", "–¢—Ä—É–¥ (6)", "–ü–∞–º—è—Ç—å (9)"])
        life = count_total(blocks, ["–ó–¥–æ—Ä–æ–≤—å–µ (4)", "–õ–æ–≥–∏–∫–∞ (5)", "–¢—Ä—É–¥ (6)"])

        # –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã
        destiny_number = second_sum if second_sum in [10, 11] else sum(map(int, str(second_sum)))

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result = f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {date_of_birth}\n\n"
        result += "–í–∞—à–∞ –º–∞—Ç—Ä–∏—Ü–∞ —Å—É–¥—å–±—ã:\n"
        for block, value in blocks.items():
            result += f"{block}: {value}\n"

        result += f"\nüîÆ –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã: {destiny_number}\n\n"
        result += "–í–Ω–µ—à–Ω–∏–π –∫–≤–∞–¥—Ä–∞—Ç:\n"
        result += f"–¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç: {temperament}\n"
        result += f"–¶–µ–ª—å: {goal}\n"
        result += f"–°–µ–º—å—è: {family}\n"
        result += f"–ü—Ä–∏–≤—ã—á–∫–∏: {habits}\n"
        result += f"–ë—ã—Ç: {life}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(result)

    except Exception as e:
        await update.message.reply_text(" –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞—Ç—Ä–∏—Ü—ã —Å—É–¥—å–±—ã –ø–æ –ü–∏—Ñ–∞–≥–æ—Ä—É.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –∏ —è –ø–æ–∫–∞–∂—É –≤–∞—à—É –º–∞—Ç—Ä–∏—Ü—É!"
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_matrix))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
